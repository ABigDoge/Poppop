#include <stdio.h> 
#include <string.h> 
#include <errno.h> 
#include <sys/socket.h> 
#include <resolv.h> 
#include <stdlib.h> 
#include <netinet/in.h> 
#include <arpa/inet.h> 
#include <unistd.h>
#include <pthread.h>

#define SERVER_PORT 8088 // 端口
#define MAX_BUF 1024 // 缓冲区大小

void ErrorHandling(char* message); // 错误处理函数
void* Monitor(void* arg); // 监听函数

struct pthread_data{
    struct sockaddr_in client_addr;
    int my_fd;
};

// 主函数
int main(int argc, char *argv[]) 
{ 
    int sockfd;
    struct sockaddr_in client_addr;
    struct pthread_data pdata;

    bzero(&client_addr, sizeof(client_addr));
    client_addr.sin_family = AF_INET;
    client_addr.sin_port = htons(SERVER_PORT);

    if(inet_aton(argv[1], (struct in_addr*) &client_addr.sin_addr.s_addr) == 0)
        ErrorHandling(argv[1]);

    // 采用TCP协议
    if((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0)
        ErrorHandling("Socekt error");
    puts("socket created");

    // 连接
    if(connect(sockfd, (struct sockaddr*) &client_addr, sizeof(client_addr))==-1)
        ErrorHandling("Connect error");
    puts("server connected");

    pdata.client_addr = client_addr;
    pdata.my_fd = sockfd;

    pthread_t* pt1 = (pthread_t*)malloc(sizeof(pthread_t));
    pthread_create(pt1, NULL, Monitor, (void *)&pdata);

    pthread_t* pt2 = (pthread_t*)malloc(sizeof(pthread_t));
    pthread_create(pt2, NULL, Transmit, (void *)&pdata);

    pthread_join(*pt1, NULL);
    pthread_join(*pt2, NULL);
    close(sockfd); 
    return 0; 
}
